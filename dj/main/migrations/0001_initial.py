# -*- coding: utf-8 -*-


from django.db import models, migrations
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('sequence', models.IntegerField(default=1)),
                ('active', models.BooleanField(default=True, help_text=b'Turn off to hide from UI.')),
                ('name', models.CharField(max_length=135)),
                ('slug', models.CharField(help_text=b'dir name to store input files', max_length=135, blank=True)),
                ('contacts', models.CharField(help_text=b'emails of people putting on the event.', max_length=300, blank=True)),
                ('description', models.TextField(blank=True)),
                ('tags', models.TextField(null=True, blank=True)),
                ('tweet_prefix', models.CharField(max_length=30, null=True, blank=True)),
                ('bucket_id', models.CharField(max_length=30, null=True, blank=True)),
                ('category_key', models.CharField(help_text=b'Category for Richard', max_length=30, null=True, blank=True)),
                ('template_mlt', models.CharField(default=b'template.mlt', max_length=60, null=True, help_text=b'template to make cutlist mlt from.')),
                ('title_svg', models.CharField(default=b'title.svg', max_length=60, null=True, help_text=b'template for event/title/authors title slide.')),
                ('preroll', models.CharField(help_text=b'name of video to prepend (not implemented)', max_length=335, blank=True)),
                ('postroll', models.CharField(help_text=b'name of video to postpend (not implemented)', max_length=335, blank=True)),
                ('credits', models.CharField(default=b'ndv-169.png', help_text=b'added to end, store in assets dir', max_length=30, blank=True)),
                ('host_user', models.CharField(help_text=b'depricated - do not use.', max_length=30, null=True, blank=True)),
                ('youtube_id', models.CharField(help_text=b'key to lookup user/pw/etc from pw store', max_length=10, null=True, blank=True)),
                ('archive_id', models.CharField(max_length=10, null=True, blank=True)),
                ('vimeo_id', models.CharField(max_length=10, null=True, blank=True)),
                ('blip_id', models.CharField(max_length=10, null=True, blank=True)),
                ('rax_id', models.CharField(max_length=10, null=True, blank=True)),
                ('richard_id', models.CharField(max_length=10, null=True, blank=True)),
                ('email_id', models.CharField(max_length=10, null=True, blank=True)),
                ('tweet_id', models.CharField(max_length=10, null=True, blank=True)),
            ],
            options={
                'ordering': ['sequence'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Cut_List',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('sequence', models.IntegerField(default=1)),
                ('start', models.CharField(help_text=b'offset from start in HH:MM:SS.ss', max_length=11, blank=True)),
                ('end', models.CharField(help_text=b'offset from start in HH:MM:SS.ss', max_length=11, blank=True)),
                ('apply', models.BooleanField(default=1)),
                ('comment', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['sequence'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('active', models.BooleanField(default=True, help_text=b'Turn off to hide from UI.')),
                ('state', models.IntegerField(default=1, help_text=b'', null=True, blank=True, choices=[(0, b'borked'), (1, b'edit'), (2, b'encode'), (3, b'push to queue'), (4, b'post'), (5, b'richard'), (6, b'review 1'), (7, b'email'), (8, b'review 2'), (9, b'make public'), (10, b'tweet'), (11, b'to-miror'), (12, b'done')])),
                ('locked', models.DateTimeField(help_text=b'clear this to unlock', null=True, blank=True)),
                ('locked_by', models.CharField(help_text=b'user/process that locked.', max_length=35, blank=True)),
                ('sequence', models.IntegerField(help_text=b'process order', null=True, blank=True)),
                ('start', models.DateTimeField(help_text=b'initially scheduled time from master, adjusted to match reality', blank=True)),
                ('duration', models.CharField(help_text=b'length in hh:mm:ss', max_length=15, null=True, blank=True)),
                ('end', models.DateTimeField(help_text=b'(calculated if start and duration are set.)', blank=True)),
                ('name', models.CharField(help_text=b'Talk title (synced from primary source)', max_length=170)),
                ('slug', models.CharField(help_text=b'file name friendly version of name', max_length=170, blank=True)),
                ('priority', models.IntegerField(help_text=b'lower may not get recorded', null=True, blank=True)),
                ('released', models.NullBooleanField(help_text=b'has someone authorised pubication')),
                ('conf_key', models.CharField(help_text=b'primary key of event in conference system database.', max_length=32, blank=True)),
                ('conf_url', models.CharField(default=b'', help_text=b"Event's details on conference site  (name,desc,time,author,files,etc)", max_length=335, blank=True)),
                ('conf_meta', models.TextField(default=b'', help_text=b'Data provided by API', null=True, blank=True)),
                ('authors', models.TextField(null=True, blank=True)),
                ('emails', models.TextField(help_text=b'email(s) of the presenter(s)', null=True, blank=True)),
                ('twitter_id', models.CharField(help_text=b'Data provided by API', max_length=135, null=True, blank=True)),
                ('language', models.CharField(help_text=b'Spoken languge (German, English...)', max_length=20, null=True, blank=True)),
                ('edit_key', models.CharField(default=b'38340982', max_length=32, null=True, help_text=b'key to allow unauthenticated users to edit this item.', blank=True)),
                ('summary', models.TextField(help_text=b'short', null=True, blank=True)),
                ('description', models.TextField(help_text=b'markdown', blank=True)),
                ('tags', models.CharField(max_length=175, null=True, blank=True)),
                ('normalise', models.CharField(max_length=5, null=True, blank=True)),
                ('channelcopy', models.CharField(help_text=b'm=mono, 01=copy left to right, 10=right to left.', max_length=2, null=True, blank=True)),
                ('license', models.CharField(default=b'CC BY-SA', max_length=20, null=True, help_text=b'see http://creativecommons.org/licenses/', blank=True)),
                ('hidden', models.NullBooleanField(help_text=b'hidden (does not show up on public episode list')),
                ('thumbnail', models.CharField(help_text=b'filename.png', max_length=135, blank=True)),
                ('host_url', models.CharField(help_text=b'URL of page video is hosted', max_length=235, null=True, blank=True)),
                ('public_url', models.CharField(help_text=b'URL public should use (like pvo or some aggregator', max_length=335, null=True, blank=True)),
                ('archive_ogv_url', models.CharField(help_text=b'URL public can use to dl an ogv (like archive.org', max_length=355, null=True, blank=True)),
                ('archive_url', models.CharField(help_text=b'not sure.. deprecated?', max_length=355, null=True, blank=True)),
                ('archive_mp4_url', models.CharField(help_text=b'URL public can use to dl an mp4. (like archive.org', max_length=355, null=True, blank=True)),
                ('rax_mp4_url', models.CharField(help_text=b'URL public can use to get an mp4. (like rackspace cdn', max_length=355, null=True, blank=True)),
                ('twitter_url', models.CharField(help_text=b'URL of tweet to email presenters for retweeting', max_length=135, null=True, blank=True)),
                ('comment', models.TextField(help_text=b'production notes', blank=True)),
                ('stop', models.NullBooleanField(help_text=b'Stop process.py from processing anymore')),
            ],
            options={
                'ordering': ['sequence'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Image_File',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('filename', models.CharField(help_text=b'foo.png', max_length=135)),
                ('text', models.TextField(help_text=b'OCRed text', blank=True)),
                ('episodes', models.ManyToManyField(to='main.Episode', blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('sequence', models.IntegerField(default=1)),
                ('active', models.BooleanField(default=True, help_text=b'Turn off to hide from UI.')),
                ('default', models.BooleanField(default=True, help_text=b'Adds this loc to new Clients.')),
                ('name', models.CharField(default=b'twist', help_text=b'room name', max_length=135)),
                ('slug', models.CharField(help_text=b'dir name to store input files', max_length=135, blank=True)),
                ('dirname', models.CharField(help_text=b'path to raw files. overrieds show/slug.', max_length=135, blank=True)),
                ('channelcopy', models.CharField(help_text=b'audio adjustment for this room', max_length=2, blank=True)),
                ('hours_offset', models.IntegerField(help_text=b'Adjust for bad clock setting', max_length=2, null=True, blank=True)),
                ('description', models.TextField(blank=True)),
                ('lon', models.FloatField(null=True, blank=True)),
                ('lat', models.FloatField(null=True, blank=True)),
            ],
            options={
                'ordering': ['sequence'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ready', models.DateTimeField()),
                ('start', models.DateTimeField(null=True, blank=True)),
                ('end', models.DateTimeField(null=True, blank=True)),
                ('user', models.CharField(max_length=50)),
                ('result', models.CharField(max_length=250)),
                ('episode', models.ForeignKey(to='main.Episode', on_delete=django.db.models.deletion.CASCADE)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Quality',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('level', models.IntegerField()),
                ('name', models.CharField(max_length=35)),
                ('description', models.TextField(blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Raw_File',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('filename', models.CharField(help_text=b'filename.dv', max_length=135)),
                ('filesize', models.BigIntegerField(default=1, help_text=b'size in bytes')),
                ('start', models.DateTimeField(help_text=b'when recorded (should agree with file name and timestamp)', null=True, blank=True)),
                ('duration', models.CharField(max_length=11, blank=True)),
                ('end', models.DateTimeField(null=True, blank=True)),
                ('trash', models.BooleanField(default=False, help_text=b'This clip is trash')),
                ('ocrtext', models.TextField(null=True, blank=True)),
                ('comment', models.TextField(blank=True)),
                ('location', models.ForeignKey(to='main.Location', on_delete=django.db.models.deletion.CASCADE)),
            ],
            options={
                'ordering': ['start', 'location', 'filename'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Show',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('sequence', models.IntegerField(default=1)),
                ('active', models.BooleanField(default=True, help_text=b'Turn off to hide from UI.')),
                ('name', models.CharField(max_length=135)),
                ('slug', models.CharField(help_text=b'dir name to store input files', max_length=135, blank=True)),
                ('category_key', models.CharField(help_text=b'Category for Richard', max_length=30, null=True, blank=True)),
                ('tags', models.TextField(null=True, blank=True)),
                ('description', models.TextField(blank=True)),
                ('conf_url', models.CharField(max_length=200, null=True, blank=True)),
                ('schedule_url', models.CharField(max_length=235, null=True, blank=True)),
                ('announcement_state', models.IntegerField(default=2, null=True, blank=True, choices=[(1, b'preview'), (2, b'review'), (3, b'approved')])),
                ('client', models.ForeignKey(to='main.Client', on_delete=django.db.models.deletion.CASCADE)),
                ('locations', models.ManyToManyField(to='main.Location', blank=True)),
            ],
            options={
                'ordering': ['sequence'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('sequence', models.IntegerField(default=1)),
                ('slug', models.CharField(max_length=30)),
                ('description', models.CharField(max_length=135, blank=True)),
            ],
            options={
                'ordering': ['sequence'],
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='raw_file',
            name='show',
            field=models.ForeignKey(to='main.Show', on_delete=django.db.models.deletion.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='log',
            name='state',
            field=models.ForeignKey(blank=True, to='main.State', null=True, on_delete=django.db.models.deletion.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='image_file',
            name='location',
            field=models.ForeignKey(to='main.Location', null=True, on_delete=django.db.models.deletion.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='image_file',
            name='show',
            field=models.ForeignKey(to='main.Show', on_delete=django.db.models.deletion.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='episode',
            name='audio_quality',
            field=models.ForeignKey(related_name='audio_quality', blank=True, to='main.Quality', null=True, on_delete=django.db.models.deletion.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='episode',
            name='location',
            field=models.ForeignKey(to='main.Location', null=True, on_delete=django.db.models.deletion.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='episode',
            name='show',
            field=models.ForeignKey(to='main.Show', on_delete=django.db.models.deletion.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='episode',
            name='video_quality',
            field=models.ForeignKey(related_name='video_quality', blank=True, to='main.Quality', null=True, on_delete=django.db.models.deletion.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='cut_list',
            name='episode',
            field=models.ForeignKey(to='main.Episode', on_delete=django.db.models.deletion.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='cut_list',
            name='raw_file',
            field=models.ForeignKey(to='main.Raw_File', on_delete=django.db.models.deletion.CASCADE),
            preserve_default=True,
        ),
    ]
