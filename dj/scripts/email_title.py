#!/usr/bin/python

# email_url.py
# emails the video URL to the presenters

from django.core.mail import get_connection, EmailMessage

from process import process

class email_title(process):

    ready_state = None

    def process_ep(self, ep):
        if self.options.verbose: print ep
        if self.options.verbose: print ep.emails, ep.released
        if ep.emails: # and ep.released:
            tos = ep.emails.split(',')
            png_url = "http://veyepar.nextdayvideo.com/static/%s/%s/titles/%s.png" % ( ep.show.client.slug, ep.show.slug, ep.slug )
            subject = "Video metadata for: %s" % ep.name
            body = """
    Hi - This is Veyepar, the automated video processing system.

    Please review the following meta data about your talk so that mistakes can be corrected now and not after the video has gone live.

    Released: %(released)s
    True means your talk is going to be recorded and posted online.  
    False means it may get recorded and processed, 
    but it will not be made public.

    The video will be titled with the following image:
    %(png_url)s

    And the main page for the video will be here:
    %(public_url)s

    Problems with the text will need to be fixed in the conference database
    that drives this page:
    %(conf_url)s

    If everyting looks good, you don't need to do anything.
    Good luck with your talk, and you will get another email when 
    the video is posted.

    Email generated by Veyepar, but replies go to Carl.
    Reference: %(slug)s
    http://veyepar.nextdayvideo.com:8080/main/E/%(id)s/

    """ % ({ 'name':ep.name, 'authors':ep.authors, 
        'description':ep.description, 
        'png_url':png_url, 
        'public_url':ep.public_url,
        'conf_url':ep.conf_url,
        'released':ep.released,
        'id':ep.id, 'slug':ep.slug })

            sender = 'Carl Karsten <carl@nextdayvideo.com>'
            headers = {
                # 'Reply-To': "ChiPy <chicago@python.org>"
                # 'From': sender,
                }    

            if self.options.test:
                print "subject:", subject
                print "body:", body
                ret = False
            else:

                connection = get_connection()
                email = EmailMessage(subject, body, sender, tos, headers=headers ) 
                ret = connection.send_messages([email])
                print tos, ret
                ret = True # need to figure out what .send_messages returns

        else:
            ret = False

        return ret

if __name__ == '__main__':
    p=email_title()
    p.main()

